/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Skill = {
  _id: string;
  _type: "skill";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  svgCode?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  url?: string;
  repo?: string;
  date?: string;
  skills?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "skill";
  }>;
};

export type Experience = {
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  company?: string;
  location?: string;
  startDate?: string;
  endDate?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  skills?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "skill";
  }>;
};

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue";
  value?: string;
};

export type InternationalizedArrayString = Array<{
  _key: string;
} & InternationalizedArrayStringValue>;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Skill | Project | Experience | InternationalizedArrayStringValue | InternationalizedArrayString | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/queries.ts
// Variable: listProjectsQuery
// Query: *[_type == "project"] {     ...,    skills[]->  } | order(date desc)
export type ListProjectsQueryResult = Array<{
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  url?: string;
  repo?: string;
  date?: string;
  skills: Array<{
    _id: string;
    _type: "skill";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    description?: Array<{
      _key: string;
    } & InternationalizedArrayStringValue>;
    svgCode?: string;
  }> | null;
}>;
// Variable: previewProjectsQuery
// Query: *[_type == "project"] {     ...,    skills[]->  } | order(date desc)[0..3]
export type PreviewProjectsQueryResult = Array<{
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  url?: string;
  repo?: string;
  date?: string;
  skills: Array<{
    _id: string;
    _type: "skill";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    description?: Array<{
      _key: string;
    } & InternationalizedArrayStringValue>;
    svgCode?: string;
  }> | null;
}>;
// Variable: listExperiencesQuery
// Query: *[_type == "experience"] | order(startDate desc)
export type ListExperiencesQueryResult = Array<{
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  company?: string;
  location?: string;
  startDate?: string;
  endDate?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  skills?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "skill";
  }>;
}>;
// Variable: previewExperiencesQuery
// Query: *[_type == "experience"] | order(startDate desc)[0..2]
export type PreviewExperiencesQueryResult = Array<{
  _id: string;
  _type: "experience";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  company?: string;
  location?: string;
  startDate?: string;
  endDate?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  skills?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "skill";
  }>;
}>;
// Variable: listSkillsQuery
// Query: *[ _type == "skill"]
export type ListSkillsQueryResult = Array<{
  _id: string;
  _type: "skill";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  svgCode?: string;
}>;
// Variable: previewSkillsQuery
// Query: *[ _type == "skill"][0..4]
export type PreviewSkillsQueryResult = Array<{
  _id: string;
  _type: "skill";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: Array<{
    _key: string;
  } & InternationalizedArrayStringValue>;
  svgCode?: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"project\"] { \n    ...,\n    skills[]->\n  } | order(date desc)\n": ListProjectsQueryResult;
    "\n  *[_type == \"project\"] { \n    ...,\n    skills[]->\n  } | order(date desc)[0..3]\n": PreviewProjectsQueryResult;
    "\n  *[_type == \"experience\"] | order(startDate desc)\n": ListExperiencesQueryResult;
    "\n  *[_type == \"experience\"] | order(startDate desc)[0..2]\n": PreviewExperiencesQueryResult;
    "\n  *[ _type == \"skill\"]\n": ListSkillsQueryResult;
    "\n  *[ _type == \"skill\"][0..4]\n": PreviewSkillsQueryResult;
  }
}
