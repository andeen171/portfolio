// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  url         String
  repo        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  skills      Skill[]
}

model Skill {
  id          String       @id @default(cuid())
  name        String
  description String
  image       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  projects    Project[]
  experiences Experience[]
}

model Experience {
  id          String    @id @default(cuid())
  title       String
  company     String
  location    String
  startDate   DateTime
  endDate     DateTime?
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  skills      Skill[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String?
  email     String?
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  author    User     @relation(fields: [userId], references: [id])
}
